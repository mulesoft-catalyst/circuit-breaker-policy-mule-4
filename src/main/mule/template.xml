<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:os="http://www.mulesoft.org/schema/mule/os"
      xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:http-policy="http://www.mulesoft.org/schema/mule/http-policy" xmlns:http-transform="http://www.mulesoft.org/schema/mule/http-policy-transform"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core
http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http
http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/http-policy
http://www.mulesoft.org/schema/mule/http-policy/current/mule-http-policy.xsd
http://www.mulesoft.org/schema/mule/http-policy-transform
http://www.mulesoft.org/schema/mule/http-policy-transform/current/mule-http-policy-transform.xsd
http://www.mulesoft.org/schema/mule/os
http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">

    <!-- Object Store configuration -->
    {{#if overrideOsSettings}}
        <os:object-store name="cbstore" persistent="{{{osPersistent}}}" entryTtl="{{{osTtl}}}" entryTtlUnit="{{{osTtlUnit}}}" />
    {{else}}
        <os:object-store name="cbstore" persistent="true" entryTtl="1" entryTtlUnit="HOURS" />
    {{/if}}
    <http-policy:proxy name="{{{policyId}}}-custom-policy">
        <http-policy:source>
            <try>
                <!-- Checking Cache for OPEN| HALF-OPEN stored value -->
                <os:retrieve key="${apiId}" target="circuit"  objectStore="cbstore" />
                <error-handler>
                    <on-error-continue type="OS:KEY_NOT_FOUND" logException="false" >
                        <logger message="Circuit is CLOSED. Continue processing. Before execution" level="DEBUG" category="com.mule.policies.circuitbreaker" />
                    </on-error-continue>
                </error-handler>
            </try>
            <choice>
                <!--  Condition to allow the application call  -->
                <when expression='#[((sizeOf(vars.circuit default "") == 0) or ((vars.circuit.timestamp default 0) + ("PT$(vars.circuit.retryPeriod default 0)S" as Period) &lt; now())) or ((vars.circuit.errorCount default 0) &lt; {{{failureThreshold}}}) or vars.circuit.state == "HALF-OPEN" ]'>
                    <try>
                        <logger message="http-policy:execute-next" level="DEBUG" category="com.mule.policies.circuitbreaker"/>
                        <http-policy:execute-next />
                        <logger message="#[attributes]" level="DEBUG" category="com.mule.policies.circuitbreaker"/>
                        <choice>
                            <when expression="#[vars.circuit == null]">
                                <logger message="no circuitBreaker" level="DEBUG" category="com.mule.policies.circuitbreaker"></logger>
                            </when>
                            <otherwise>
                                <logger message="http-policy:execute-next completed. Removing cached circuit" level="DEBUG" category="com.mule.policies.circuitbreaker"></logger>
                                <os:remove key="${apiId}" objectStore="cbstore"  />
                            </otherwise>
                        </choice>
                        {{#if evaluateHttpResponse}}
                            <choice>
                                <when expression="#[%dw 2.0 
                                                    output application/json 
                                                    var httpCodesArray=(({{{httpCodesArray}}} replace ' ' with '') splitBy  ',') as Array 
                                                    --- 
                                                    (httpCodesArray contains (attributes.statusCode as String))]">

                                    <!-- Trip the Circuit -->
                                    <set-variable value='#[%dw 2.0
                                      output application/json
                                      var currentErrorCount = (vars.circuit.errorCount default 0) + 1
                                      var state = if(currentErrorCount &lt; {{{failureThreshold}}}) "CLOSED" 
                                                  else if ( (currentErrorCount &gt;= {{{failureThreshold}}}) and ((vars.circuit.timestamp) + ("PT$(vars.circuit.retryPeriod default 0)S" as Period) &lt; now()) and vars.circuit.state == "OPEN") "HALF-OPEN"
                                                  else "OPEN"
                                      ---
                                      {
                                        "failureThreshold": {{{failureThreshold}}},
                                        "retryPeriod": {{{retryPeriod}}},
                                        "state": state,
                                        "timestamp": now(),
                                        "errorCount": currentErrorCount
                                       }]' variableName="circuit" />
                                    <os:store key="${apiId}" objectStore="cbstore">
                                        <os:value>
                                            #[vars.circuit]
                                        </os:value>
                                    </os:store>
                                    <http-transform:set-response statusCode="503">
                                        <http-transform:body>#[%dw 2.0 output application/json --- "circuitBreaker": vars.circuit ++ "error": { "code": "$(attributes.statusCode)", "reasonPhrase": "$(attributes.reasonPhrase)"}]</http-transform:body>
                                    </http-transform:set-response>
                                </when>
                                <otherwise>
                                    <logger message="HTTP Status Code not included in the HTTP Codes Array" level="DEBUG" category="com.mule.policies.circuitbreaker" />
                                </otherwise>
                            </choice>
                        {{/if}}
                        {{#if evaluateErrorObject}}
                            <error-handler>
                                <on-error-propagate type="ANY" logException="true">
                                    <flow-ref name="error-logger" />
                                    <choice>
                                        <when expression="#[%dw 2.0 output application/json var exceptionsArray=(({{{exceptionsArray}}} replace ' ' with '') splitBy  ',') as Array --- (exceptionsArray contains (error.errorType.namespace ++ ':' ++ error.errorType.identifier) ) or ( (sizeOf(exceptionsArray) == 1) and (exceptionsArray contains 'ANY'))]">
                                            <!-- Trip the Circuit -->
                                            <set-variable value='#[%dw 2.0
                                              output application/json
                                              var currentErrorCount = (vars.circuit.errorCount default 0) + 1
                                              var state = if(currentErrorCount &lt; {{{failureThreshold}}}) "CLOSED" 
                                                          else if ( (currentErrorCount &gt;= {{{failureThreshold}}}) and ((vars.circuit.timestamp) + ("PT$(vars.circuit.retryPeriod default 0)S" as Period) &lt; now()) and vars.circuit.state == "OPEN") "HALF-OPEN"
                                                          else "OPEN"
                                              ---
                                              {
                                                "failureThreshold": {{{failureThreshold}}},
                                                "retryPeriod": {{{retryPeriod}}},
                                                "state": state,
                                                "timestamp": now(),
                                                "errorCount": currentErrorCount
                                               }]'
                                                          variableName="circuit" />
                                            <os:store key="${apiId}" objectStore="cbstore">
                                                <os:value>
                                                    #[vars.circuit]
                                                </os:value>
                                            </os:store>
                                            <http-transform:set-response statusCode="503">
                                                <http-transform:body>#[%dw 2.0 output application/json --- "circuitBreaker": vars.circuit ++ "error": "$(error.description)"]</http-transform:body>
                                            </http-transform:set-response>
                                        </when>
                                        <otherwise>
                                            <logger message="Exception not included in the Exceptions Array" level="DEBUG" category="com.mule.policies.circuitbreaker" />
                                            <http-transform:set-response statusCode="500">
                                                <http-transform:body>#[%dw 2.0 output application/json --- error.description]</http-transform:body>
                                            </http-transform:set-response>
                                        </otherwise>
                                    </choice>
                                </on-error-propagate>
                                <on-error-continue type="OS:KEY_NOT_FOUND" logException="false">
                                    <logger message="Circuit state is CLOSED. Continue processing."  level="DEBUG" category="com.mule.policies.circuitbreaker"/>
                                </on-error-continue>
                            </error-handler>
                        {{/if}}    
                    </try>
                </when>
                <otherwise>
                    <http-transform:set-response statusCode="503">
                        <http-transform:body>#[%dw 2.0 
                                                output application/json 
                                                --- 
                                                "circuitBreaker": vars.circuit mapObject ((value, key, index) -> 
                                                {
                                                    ((key): value) if(key as String != "timestamp"),
                                                    (timestamp: now()) if(key as String == "timestamp")
                                                }
                                                ) 
                                                ++ "error": "The circuit is still open, not propagating new requests until " ++ vars.circuit.timestamp + ("PT$(vars.circuit.retryPeriod)S" as Period)]</http-transform:body>
                    </http-transform:set-response>
                </otherwise>
            </choice>
        </http-policy:source>
    </http-policy:proxy>

    <flow name="error-logger">
        <logger level="ERROR" message="#[%dw 2.0 output application/json --- errorMessage:  (error.errorType.namespace ++ ':' ++ error.errorType.identifier)]" category="com.mule.policies.circuitbreaker" />
    </flow>
</mule>