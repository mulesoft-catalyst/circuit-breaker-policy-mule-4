<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:http-policy-transform="http://www.mulesoft.org/schema/mule/http-policy-transform" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:http-policy="http://www.mulesoft.org/schema/mule/http-policy" xmlns:http-transform="http://www.mulesoft.org/schema/mule/http-policy-transform" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core
http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http
http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/http-policy
http://www.mulesoft.org/schema/mule/http-policy/current/mule-http-policy.xsd
http://www.mulesoft.org/schema/mule/http-policy-transform
http://www.mulesoft.org/schema/mule/http-policy-transform/current/mule-http-policy-transform.xsd
http://www.mulesoft.org/schema/mule/os
http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">

    <!-- Object Store configuration -->
    {{#if overrideOsSettings}}
        <os:object-store name="cbstore" persistent="{{{osPersistent}}}" entryTtl="{{{osTtl}}}" entryTtlUnit="{{{osTtlUnit}}}" />
    {{else}}
        <os:object-store name="cbstore" persistent="true" entryTtl="1" entryTtlUnit="HOURS" />
    {{/if}}
    
    <!-- Main Policy -->
    <http-policy:proxy name="{{{policyId}}}-custom-policy">
        <http-policy:source>
            <flow-ref name="getStatusFromCache" />
            <choice>                
                <when expression='#[ ((sizeOf(vars.circuit default "") == 0) or ((vars.circuit.timestamp default 0) + ("PT$(vars.circuit.retryPeriod default 0){{{retryPeriodUnit}}}" as Period) &lt; now())) or ((vars.circuit.errorCount default 0) &lt; {{{failureThreshold}}}) or vars.circuit.state == "HALF-OPEN" ]'>
                    <!-- Circuit is closed or half-open -->
                {{#if evaluateErrorObject}}
                    <try>
                {{/if}}
                        <logger message="http-policy:execute-next" level="DEBUG" category="com.mule.policies.circuitbreaker"/>
                        <http-policy:execute-next />
                        <logger message="#[attributes]" level="DEBUG" category="com.mule.policies.circuitbreaker"/>
                        <choice>
                            <when expression="#[vars.circuit == null]">
                                <logger message="no circuitBreaker" level="DEBUG" category="com.mule.policies.circuitbreaker"></logger>
                            </when>
                            <otherwise>
                                <logger message="http-policy:execute-next completed. Removing cached circuit" level="DEBUG" category="com.mule.policies.circuitbreaker"></logger>
                                <os:remove key="${apiId}" objectStore="cbstore"  />
                            </otherwise>
                        </choice>
                {{#if evaluateHttpResponse}}
                            <flow-ref name="evaluateHttpResponse" />
                {{/if}}
                {{#if evaluateErrorObject}}
                            <error-handler>
                                <on-error-propagate type="ANY" logException="true">
                                    <flow-ref name="evaluateErrorObject" />
                                </on-error-propagate>
                            </error-handler>  
                    </try>
                {{/if}}
                </when>
                <otherwise>
                    <!-- Circuit open -->
                    <flow-ref name="processOpenCircuit" />
                </otherwise>
            </choice>
        </http-policy:source>
    </http-policy:proxy>

    <!-- SUBFLOWS: can be used in Studio UI -->
    
    <!-- Get circuit's previous state from cache -->
    <sub-flow name="getStatusFromCache">
        <try>
            <!-- Checking Cache for OPEN| HALF-OPEN stored value -->
            <os:retrieve key="${apiId}" target="circuit"  objectStore="cbstore" doc:name="Get status from OS"/>
            <error-handler>
                <on-error-continue type="OS:KEY_NOT_FOUND" logException="false" >
                    <logger message="Circuit is CLOSED. Continue processing. Before execution" level="DEBUG" category="com.mule.policies.circuitbreaker" doc:name="Logger"/>
                </on-error-continue>
            </error-handler>
        </try>
    </sub-flow>
    
    <sub-flow name="errorLogger">
        <logger level="ERROR" message="#[%dw 2.0 output application/json --- errorMessage:  (error.errorType.namespace ++ ':' ++ error.errorType.identifier)]" category="com.mule.policies.circuitbreaker" doc:name="Log error"/>
    </sub-flow>

    <!-- Update circuit state and cache it -->
    <sub-flow name="updateCircuit">
        <set-variable variableName="circuit" 
            value='#[%dw 2.0
                output application/json
                var currentErrorCount = (vars.circuit.errorCount default 0) + 1
                var state = if(currentErrorCount &lt; {{{failureThreshold}}}) "CLOSED" 
                          else if ( (currentErrorCount &gt;= {{{failureThreshold}}}) and ((vars.circuit.timestamp) + ("PT$(vars.circuit.retryPeriod default 0){{{retryPeriodUnit}}}" as Period) &lt; now()) and vars.circuit.state == "OPEN") "HALF-OPEN"
                          else "OPEN"
                ---
                {
                    "failureThreshold": {{{failureThreshold}}},
                    "retryPeriod": {{{retryPeriod}}},
                    "retryPeriodUnit": "{{{retryPeriodUnit}}}",
                    "state": state,
                    "timestamp": now(),
                    "errorCount": currentErrorCount
                }]' doc:name="Set Circuit Breaker Info"/>
        <logger level="DEBUG" doc:name="Updated Circuit Info" doc:id="48d22930-92e1-42eb-b446-bb846bf08c91" message='#[vars.circuit default {}]' category="com.mule.policies.circuitbreaker" />
        <os:store key="${apiId}" objectStore="cbstore" doc:name="Save status to OS">
            <os:value>
                #[vars.circuit]
            </os:value>
        </os:store>
    </sub-flow>
    
    <!-- Evaluate circuit state based on API response's status code.  If CB info is disabled, then body is API response body.  
        If CB info is enabled, then body is CB field and data field with API response body. -->
    <sub-flow name="evaluateHttpResponse">
        <choice doc:name="Is status code in CB list?">
            <when expression='#[output application/json 
                                var httpCodesArray=(("{{{httpCodesArray}}}" replace " " with "") splitBy  ",") as Array 
                                --- 
                                (httpCodesArray contains (attributes.statusCode as String))]'>
                <logger message="HTTP Status Code is included in the HTTP Codes Array" level="DEBUG" category="com.mule.policies.circuitbreaker" doc:name="HTTP Status Code in list"/>
                <flow-ref name="updateCircuit" doc:name="updateCircuit"/>
                <set-variable variableName="response" doc:name="Set Response Info"
                    value='#[output application/json
                    {{#if giveCircuitResponse}}
                        import update from dw::util::Values
                        var isOpen = vars.circuit.state == "OPEN" default false
                        var retryAfter = vars.circuit.timestamp + ("PT$(vars.circuit.retryPeriod){{{retryPeriodUnit}}}" as Period) as String
                    {{/if}}
                        ---
                        {   
                            status: 503,
                    {{#if giveCircuitResponse}}
                            body: {
                                (data: payload) if (!isEmpty(payload)),
                                circuitBreaker: vars.circuit update {
                                    case .errorStatusCode! -> attributes.statusCode as String
                                    case .retryAfter! if (isOpen) -> retryAfter
                                }
                            }
                    {{else}}
                            body: payload
                    {{/if}}                             
                        }]' />
                <flow-ref name="setResponse" doc:name="setResponse"/>
            </when>
            <otherwise>
                <logger message="HTTP Status Code not included in the HTTP Codes Array" level="DEBUG" category="com.mule.policies.circuitbreaker" doc:name="HTTP Status Code not in list"/>
            </otherwise>
        </choice>
    </sub-flow>
    
    <!-- Evaluate circuit state based on error thrown from API.  This always returns error field in body and will add CB info if enabled. -->
    <sub-flow name="evaluateErrorObject">
        <flow-ref name="errorLogger" doc:name="errorLogger"/>
        <choice doc:name="Is exception in CB list?">
            <when expression='#[output application/json var exceptionsArray=(("{{{exceptionsArray}}}" replace " " with "") splitBy  ",") as Array --- (exceptionsArray contains (error.errorType.namespace ++ ":" ++ error.errorType.identifier) ) or ( (sizeOf(exceptionsArray) == 1) and (exceptionsArray contains "ANY"))]'>
                
                <logger level="DEBUG" doc:name="Exception in list" doc:id="d5857c44-0728-4ca9-a78e-6bb2491d6c02" message="Exception is included in the Exceptions Array" category="com.mule.policies.circuitbreaker" />
                <flow-ref name="updateCircuit" doc:name="updateCircuit"/>
                <set-variable variableName="response" doc:name="Set Response Info"
                    value='#[output application/json
                    {{#if giveCircuitResponse}}
                        import update from dw::util::Values
                        var isOpen = vars.circuit.state == "OPEN" default false
                        var retryAfter = vars.circuit.timestamp + ("PT$(vars.circuit.retryPeriod){{{retryPeriodUnit}}}" as Period) as String
                    {{/if}}
                        ---
                        {           
                            status: 503,
                            body: {
                                error: error.description default "",
                    {{#if giveCircuitResponse}}
                                circuitBreaker: vars.circuit update {
                                    case .retryAfter! if (isOpen) -> retryAfter
                                }
                    {{/if}}
                            }                                           
                        }]' />
                <flow-ref name="setResponse" doc:name="setResponse"/>
            </when>
            <otherwise>
                <logger message="Exception not included in the Exceptions Array" level="DEBUG" category="com.mule.policies.circuitbreaker" doc:name="Exception not in list"/>
                <set-variable variableName="response" doc:name="Set Response Info"
                    value='#[output application/json
                        ---
                        {
                            status: 500,
                            body: {
                                error: error.description default ""
                            }
                        }]' />
                <flow-ref name="setResponse" doc:name="setResponse"/>
            </otherwise>
        </choice>
    </sub-flow>
    
    <!-- Set the open circuit 503 response.  Body is empty if CB info is disabled.
        The timestamp in CB info is updated to current time, but retryAfter is calculated from the original timestamp. -->
    <sub-flow name="processOpenCircuit">
        <logger message="Circuit is open, so sending 503 response." level="DEBUG" category="com.mule.policies.circuitbreaker" />
        <set-variable variableName="response" doc:name="Set Response Info"
            value='#[output application/json
                import update from dw::util::Values
                var retryAfter = vars.circuit.timestamp + ("PT$(vars.circuit.retryPeriod){{{retryPeriodUnit}}}" as Period) as String
                ---
                {
                    status: 503,                    
            {{#if giveCircuitResponse}}
                    body: {
                        circuitBreaker: vars.circuit update {
                            case .timestamp -> now()
                            case .retryAfter! -> retryAfter
                        }
                    }
            {{/if}}         
                }]' />
        <flow-ref name="setResponse" doc:name="setResponse"/>
    </sub-flow>
    
    <!-- Set the HTTP response: status, body [optional], and retry-after header [when OPEN] -->
    <sub-flow name="setResponse">
        <choice doc:name="Does response body exist?" doc:id="38126881-11b7-480d-9166-7a632e0968e5" >
            <when expression="#[!isEmpty(vars.response.body)]">
                <http-transform:set-response statusCode="#[vars.response.status default 503]" doc:name="Set HTTP response with body">
                    <http-transform:body><![CDATA[#[output application/json
                        ---
                        vars.response.body]]]>
                    </http-transform:body>
                    <http-transform:headers><![CDATA[#[output application/java
                        var isOpen = vars.circuit.state == "OPEN" default false
                        var retryAfter = vars.circuit.timestamp + ("PT$(vars.circuit.retryPeriod){{{retryPeriodUnit}}}" as Period)
                        ---
                        {                                  
                           ("retry-after": retryAfter as String {format: "EEE, dd MMM uuuu KK:mm:ss zz"} default "") if (isOpen)
                        }]]]>
                    </http-transform:headers>
                </http-transform:set-response>
            </when>
            <otherwise >
                <set-payload value="#[null]" doc:name="Set empty body (null and */* mimeType)" mimeType="*/*"/>
                <http-policy-transform:set-response statusCode="#[vars.response.status default 503]" doc:name="Set HTTP response without body" >
                    <http-transform:body><![CDATA[#[payload]]]></http-transform:body>
                    <http-policy-transform:headers ><![CDATA[#[output application/java
                        var isOpen = vars.circuit.state == "OPEN" default false
                        var retryAfter = vars.circuit.timestamp + ("PT$(vars.circuit.retryPeriod){{{retryPeriodUnit}}}" as Period)
                        ---
                        {                                  
                           ("retry-after": retryAfter as String {format: "EEE, dd MMM uuuu KK:mm:ss zz"} default "") if (isOpen)
                        }]]]>
                    </http-policy-transform:headers>
                </http-policy-transform:set-response>
            </otherwise>
        </choice>
    </sub-flow>
</mule>